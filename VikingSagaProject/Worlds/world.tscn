[gd_scene load_steps=4 format=3 uid="uid://whal4h4lrk3t"]

[ext_resource type="Script" path="res://world/world.gd" id="1"]
[ext_resource type="Resource" path="res://world/heightmap_settings.tres" id="2"]
[ext_resource type="PackedScene" uid="uid://player_scene" path="res://player/player.tscn" id="3"]

[node name="World" type="Node3D"]
process_mode = 1
script = ExtResource("1")

[node name="HeightmapGenerator" type="Node3D" parent="."]
script = ExtResource("HeightmapGenerator3D") # Assuming the previous script is saved
settings = ExtResource("2")
editor_preview = true

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 5, 0)
shadow_enabled = true
directional_shadow_max_distance = 100.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_abcde")

[node name="Player" instance=ExtResource("3")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5, 0)

[node name="ChunkLoader" type="Node3D" parent="."]
script = SubResource("ChunkLoader3D_xyz")

[sub_resource type="Environment" id="Environment_abcde"]
background_mode = 1
background_color = Color(0.2, 0.6, 0.8, 1)
ambient_light_source = 2
ambient_light_color = Color(0.8, 0.9, 1, 1)
fog_enabled = true
fog_light_color = Color(0.5, 0.6, 0.7, 1)
fog_density = 0.01

[sub_resource type="Script" id="ChunkLoader3D_xyz"]
script/source = """
extends ChunkAwareGenerator3D

@export var load_radius: int = 3
@export var player_path: NodePath = "../Player"

var _player: Node3D

func _ready():
    if not Engine.is_editor_hint():
        _player = get_node(player_path)
        _generate_initial_chunks()

func _process(delta):
    if not Engine.is_editor_hint() and _player:
        _update_chunks()

func _generate_initial_chunks():
    var player_pos = _get_player_chunk_position()
    for x in range(-load_radius, load_radius + 1):
        for z in range(-load_radius, load_radius + 1):
            generate_chunk(Vector3i(player_pos.x + x, 0, player_pos.z + z))

func _update_chunks():
    var player_chunk = _get_player_chunk_position()
    var to_generate = []
    
    for x in range(-load_radius, load_radius + 1):
        for z in range(-load_radius, load_radius + 1):
            var chunk_pos = Vector3i(player_chunk.x + x, 0, player_chunk.z + z)
            if not generated_chunks.has(chunk_pos):
                to_generate.append(chunk_pos)
    
    for chunk in to_generate:
        generate_chunk(chunk)

func _get_player_chunk_position() -> Vector3i:
    var pos = _player.global_position
    var chunk_size = settings.chunk_size if settings else Vector2i(16, 16)
    return Vector3i(
        floor(pos.x / chunk_size.x),
        0,
        floor(pos.z / chunk_size.y)
    )
"""

[connection signal="generation_finished" from="HeightmapGenerator" to="." method="_on_generator_finished"]
